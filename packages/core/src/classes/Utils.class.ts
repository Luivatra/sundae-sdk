import { getSwapOutput } from "@sundaeswap/cpp";

import {
  PoolCoin,
  IAsset,
  IPoolData,
  IPoolDataAsset,
  IProtocolParams,
  TSupportedNetworks,
} from "../@types";
import { ADA_ASSET_ID } from "../lib/constants";
import { AssetAmount } from "@sundaeswap/asset";
import { Data } from "lucid-cardano";

export class Utils {
  static getParams(network: TSupportedNetworks): IProtocolParams {
    const params: Record<TSupportedNetworks, IProtocolParams> = {
      mainnet: {
        ESCROW_ADDRESS:
          "addr1wxaptpmxcxawvr3pzlhgnpmzz3ql43n2tc8mn3av5kx0yzs09tqh8",
        SCOOPER_FEE: 2500000n,
        RIDER_FEE: 2000000n,
        ESCROW_CANCEL_REDEEMER: Utils.getVoidRedeemer(),
        ESCROW_SCRIPT_VALIDATOR:
          "59084601000033233322232332232333222323332223322323332223233223233223332223333222233322233223322332233223332223322332233322232323232322222325335300b001103c13503d35303b3357389201035054350003c498ccc888c8c8c94cd4c05c0144d4c0680188888cd4c04c480048d4c0ed40188888888888cd4c078480048ccd5cd19b8f375c0020180440420066a6040006446a6048004446a605000444666aa60302400244a66a6a07c0044266a08c0020042002a0886466a002a088a08a2446600466a609000846a0820024a0806600400e00226a606ca002444444444466a6032240024646464666ae68cdc399991119191800802990009aa82c1119a9a826000a4000446a6aa08a00444a66a6050666ae68cdc78010048150148980380089803001990009aa82b9119a9a825800a4000446a6aa08800444a66a604e666ae68cdc7801003814814080089803001999aa81e3ae335503c75ceb4d4c084cccd5cd19b8735573aa006900011998119aba1500335742a00466a080eb8d5d09aba2500223505135304f33573892010350543100050499262220020183371491010270200035302801422220044800808007c4d5d1280089aab9e500113754002012264a66a6a070601a6aae78dd50008a81a910a99a9a81d0008a81b910a99a9a81e0008a81c910a99a9a81f0008a81d910a99a9a8200008a81e910a99a9a8210008a81f910a99a9a8220008a820910a99a9a8230008a821910a99a9a8240008a822910a99a9a8250008a823910a99a9a82600089999999999825981000a18100090080071810006181000500418100031810002001110a8259a980a1999ab9a3370e6aae754009200023301635742a0046ae84d5d1280111a8211a982019ab9c490103505431000414992622002135573ca00226ea8004cd40148c8c8c8c8cccd5cd19b8735573aa00890001199980d9bae35742a0086464646666ae68cdc39aab9d5002480008cc88cc08c008004c8c8c8cccd5cd19b8735573aa004900011991198148010009919191999ab9a3370e6aae754009200023302d304735742a00466a07a4646464646666ae68cdc3a800a4004466606a6eb4d5d0a8021bad35742a0066eb4d5d09aba2500323333573466e1d4009200023037304e357426aae7940188d4154d4c14ccd5ce2490350543100054499264984d55cea80189aba25001135573ca00226ea8004d5d09aba2500223504e35304c335738921035054310004d49926135573ca00226ea8004d5d0a80119a81cbae357426ae8940088d4128d4c120cd5ce249035054310004949926135573ca00226ea8004d5d0a80119a81abae357426ae8940088d4118d4c110cd5ce249035054310004549926135573ca00226ea8004d5d0a8019bad35742a00464646464646666ae68cdc3a800a40084605c646464646666ae68cdc3a800a40044606c6464646666ae68cdc39aab9d5002480008cc88cd40f8008004dd69aba15002375a6ae84d5d1280111a8289a982799ab9c491035054310005049926135573ca00226ea8004d5d09aab9e500423333573466e1d40092000233036304b35742a0086eb4d5d09aba2500423504e35304c335738921035054310004d499264984d55cea80109aab9e5001137540026ae84d55cf280291999ab9a3370ea0049001118169bad357426aae7940188cccd5cd19b875003480008ccc0bcc11cd5d0a8031bad35742a00a66a072eb4d5d09aba2500523504a353048335738920103505431000494992649926135573aa00626ae8940044d55cf280089baa001357426ae8940088d4108d4c100cd5ce249035054310004149926135744a00226ae8940044d55cf280089baa0010033350052323333573466e1d40052002201623333573466e1d40092000201623504035303e335738921035054310003f499264984d55ce9baa001002335005200100112001230023758002640026aa072446666aae7c004940c08cd40bcd5d080118019aba2002498c8004d540e088448894cd4d40bc0044008884cc014008ccd54c01c48004014010004c8004d540dc884894cd4d40b400440188854cd4c01cc01000840244cd4c01848004010004488008488004800488848ccc00401000c00880048848cc00400c00880044880084880048004888848cccc00401401000c00880048848cc00400c00880048848cc00400c00880048848cc00400c00880048488c00800c888488ccc00401401000c800484888c00c0108884888ccc00801801401084888c00401080048488c00800c88488cc00401000c800448848cc00400c008480044488c88c008dd5800990009aa80d11191999aab9f0022501223350113355008300635573aa004600a6aae794008c010d5d100180c09aba10011122123300100300211200112232323333573466e1d400520002350083005357426aae79400c8cccd5cd19b87500248008940208d405cd4c054cd5ce24810350543100016499264984d55cea80089baa00112122300200311220011200113500d35300b3357389211f556e6578706563746564205478496e666f20636f6e737472756374696f6e2e0000c498888888888848cccccccccc00402c02802402001c01801401000c00880044488008488488cc00401000c480048c8c8cccd5cd19b875001480088c018dd71aba135573ca00646666ae68cdc3a80124000460106eb8d5d09aab9e500423500c35300a3357389201035054310000b499264984d55cea80089baa001212230020032122300100320012323333573466e1d40052002200823333573466e1d40092000200a2350073530053357389210350543100006499264984d55ce9baa0011200120011261220021220012001112323001001223300330020020014891c0029cb7c88c7567b63d1a512c0ed626aa169688ec980730c0473b9130001",
        FREEZER_STAKE_KEYHASH:
          "d7244b4a8777b7dc6909f4640cf02ea4757a557a99fb483b05f87dfe",
        FREEZER_PAYMENT_SCRIPTHASH: "",
        FREEZER_REFERENCE_INPUT: "",
      },
      preview: {
        ESCROW_ADDRESS:
          "addr_test1wpesulg5dtt5y73r4zzay9qmy3wnlrxdg944xg4rzuvewls7nrsf0",
        SCOOPER_FEE: 2500000n,
        RIDER_FEE: 2000000n,
        ESCROW_CANCEL_REDEEMER: Utils.getVoidRedeemer(),
        ESCROW_SCRIPT_VALIDATOR:
          "5906f501000033233223232323232323322323233223232323222323232322322323232325335001101d13263201d335738921035054350001d32325335001133530121200123353013120012333573466e3cdd700080100b00a9aa8021111111111001991a800911a80111199aa980b0900091299a8011099a8138008010800a81299a8121a8011119a80111a8100009280f99a812001a8129a8011111001899a9809090009191919199ab9a3370e646464646002008640026aa0504466a0029000111a80111299a999ab9a3371e0040360420402600e0022600c006640026aa04e4466a0029000111a80111299a999ab9a3371e00400e04003e20022600c00666e292201027020003500722220043335501975c66aa032eb9d69a9999ab9a3370e6aae75400d200023332221233300100400300235742a0066ae854008cd406dd71aba135744a004464c6404666ae7008008c0848880092002018017135744a00226aae7940044dd50009aa80191111111110049999ab9a3370ea00c9001109100111999ab9a3370ea00e9000109100091931900f99ab9c01c01f01d01c3333573466e1cd55cea8052400046666444424666600200a0080060046eb8d5d0a8051919191999ab9a3370e6aae754009200023232123300100300233501a75c6ae84d5d128019919191999ab9a3370e6aae754009200023232123300100300233501e75c6ae84d5d128019919191999ab9a3370e6aae7540092000233221233001003002302435742a00466a0424646464646666ae68cdc3a800a4004466644424466600200a0080066eb4d5d0a8021bad35742a0066eb4d5d09aba2500323333573466e1d400920002321223002003302b357426aae7940188c98c80c0cd5ce01681801701689aab9d5003135744a00226aae7940044dd50009aba135744a004464c6405266ae700980a409c4d55cf280089baa00135742a004464c6404a66ae7008809408c4d55cf280089baa00135742a004464c6404266ae7007808407c4d55cf280089baa00135742a0126eb4d5d0a80419191919191999ab9a3370ea002900211909111801802191919191999ab9a3370ea002900111909118010019919191999ab9a3370e6aae7540092000232321233001003002375a6ae84d5d128019bad35742a004464c6405866ae700a40b00a84d55cf280089baa001357426aae7940108cccd5cd19b875002480008cc88488cc00401000cc094d5d0a8021bad357426ae8940108c98c80a4cd5ce01301481381309aab9d5002135573ca00226ea8004d5d09aab9e500523333573466e1d4009200223212223001004375a6ae84d55cf280311999ab9a3370ea00690001199911091119980100300280218109aba15006375a6ae854014cd4075d69aba135744a00a464c6404a66ae7008809408c0880844d55cea80189aba25001135573ca00226ea8004d5d09aba2500823263201d33573803403a036264a66a601c6aae78dd50008980d24c442a66a0022603893110a99a8008980f24c442a66a0022604093110a99a8008981124c442a66a0022604893110a99a8008981324c442a66a0022605093110a99a8008981524c442a66a0022605893110a99a800899999991111109199999999980080380300b80a802802007801801004981080a18108091810806181080518108031810802110981824c6a6666ae68cdc39aab9d5002480008cc8848cc00400c008d5d0a8011aba135744a004464c6403866ae70064070068880084d55cf280089baa001135573a6ea80044d5d1280089aba25001135573ca00226ea80048c008dd6000990009aa808911999aab9f0012501323350123574200460066ae8800803cc8004d5404088448894cd40044008884cc014008ccd54c01c48004014010004c8004d5403c884894cd400440148854cd4c01000840204cd4c018480040100044880084880044488c88c008dd5800990009aa80711191999aab9f00225011233501033221233001003002300635573aa004600a6aae794008c010d5d100180709aba100112232323333573466e1d400520002350073005357426aae79400c8cccd5cd19b875002480089401c8c98c8038cd5ce00580700600589aab9d5001137540022424460040062244002464646666ae68cdc3a800a400446424460020066eb8d5d09aab9e500323333573466e1d400920002321223002003375c6ae84d55cf280211931900519ab9c00700a008007135573aa00226ea80048c8cccd5cd19b8750014800884880048cccd5cd19b8750024800084880088c98c8020cd5ce00280400300289aab9d375400292103505431002326320033357389211f556e6578706563746564205478496e666f20636f6e737472756374696f6e2e00003498480044488008488488cc00401000c448c8c00400488cc00cc00800800522011c4086577ed57c514f8e29b78f42ef4f379363355a3b65b9a032ee30c90001",
        FREEZER_STAKE_KEYHASH:
          "045d47cac5067ce697478c11051deb935a152e0773a5d7430a11baa8",
        FREEZER_PAYMENT_SCRIPTHASH:
          "73275b9e267fd927bfc14cf653d904d1538ad8869260ab638bf73f5c",
        FREEZER_REFERENCE_INPUT:
          "e08869946b5d3b6f32d11bac15d99ce68a993d5853980e4fca302825c02df94f#0",
      },
    };

    return params[network];
  }

  static getVoidRedeemer(): string {
    return Data.void();
  }

  static sortSwapAssets(
    assets: [IPoolDataAsset | IAsset, IPoolDataAsset | IAsset]
  ) {
    return assets.sort((a, b) => a.assetId.localeCompare(b.assetId));
  }

  static getAssetSwapDirection(
    { assetId: assetID }: IAsset,
    assets: [IPoolDataAsset, IPoolDataAsset]
  ): PoolCoin {
    const sorted = Utils.sortSwapAssets(assets);
    if (sorted[1]?.assetId === assetID) {
      return 1;
    }

    return 0;
  }

  static convertPoolFeeToPercent(fee: string): number {
    return Number(fee) / 100;
  }

  static subtractPoolFeeFromAmount(amount: AssetAmount, fee: string): number {
    const feePercent = Utils.convertPoolFeeToPercent(fee);
    return Number(amount.amount) * (1 - feePercent);
  }

  static getMinReceivableFromSlippage(
    pool: IPoolData,
    suppliedAsset: IAsset,
    slippage: number
  ): AssetAmount {
    const supplyingPoolAssetA = pool.assetA.assetId === suppliedAsset.assetId;
    const output = getSwapOutput(
      suppliedAsset.amount.amount,
      BigInt(supplyingPoolAssetA ? pool.quantityA : pool.quantityB),
      BigInt(supplyingPoolAssetA ? pool.quantityB : pool.quantityA),
      Utils.convertPoolFeeToPercent(pool.fee),
      false
    );

    if (
      ![pool.assetA.assetId, pool.assetB.assetId].includes(
        suppliedAsset.assetId
      )
    ) {
      throw new Error(
        `The supplied asset ID does not match either assets within the supplied pool data. ${JSON.stringify(
          {
            suppliedAssetID: suppliedAsset.assetId,
            poolAssetIDs: [pool.assetA.assetId, pool.assetB.assetId],
          }
        )}`
      );
    }

    const receivableAssetDecimals = supplyingPoolAssetA
      ? pool.assetB.decimals
      : pool.assetA.decimals;

    return new AssetAmount(
      BigInt(Math.ceil(Number(output.output) * (1 - slippage))),
      receivableAssetDecimals
    );
  }

  /**
   * Takes an array of {@link IAsset} and aggregates them into an object of amounts.
   * This is useful for when you are supplying an asset that is both for the payment and
   * the Order.
   *
   * @param suppliedAssets
   */
  static accumulateSuppliedAssets(
    suppliedAssets: IAsset[],
    network: TSupportedNetworks,
    additionalADA?: bigint
  ): Record<
    /** The PolicyID and the AssetName concatenated together with no period. */
    string | "lovelace",
    /** The amount as a bigint (no decimals) */
    bigint
  > {
    const assets: Record<string, bigint> = {};
    const { SCOOPER_FEE, RIDER_FEE } = Utils.getParams(network);

    const aggregatedAssets = suppliedAssets.reduce((acc, curr) => {
      const existingAssetIndex = acc.findIndex(
        ({ assetId: assetID }) => curr.assetId === assetID
      );
      if (existingAssetIndex !== -1) {
        acc[existingAssetIndex] = {
          assetId: acc[existingAssetIndex].assetId,
          amount: acc[existingAssetIndex].amount.add(curr.amount),
        };

        return acc;
      }

      return [...acc, curr];
    }, [] as IAsset[]);

    // Set the minimum ADA amount.
    assets.lovelace = SCOOPER_FEE + RIDER_FEE + (additionalADA ?? 0n);

    aggregatedAssets.forEach((suppliedAsset) => {
      if (suppliedAsset.assetId === ADA_ASSET_ID) {
        assets.lovelace += suppliedAsset.amount.amount;
      } else {
        assets[suppliedAsset.assetId.replace(".", "")] =
          suppliedAsset.amount.amount;
      }
    });

    return assets;
  }

  /**
   * Split a long string into an array of chunks for metadata.
   *
   * @param str Full string that you wish to split by chunks of 64.
   * @param prefix Optional prefix to add to each chunk. This is useful if your transaction builder has helper functions to convert strings to CBOR bytestrings (i.e. Lucid will convert strings with a `0x` prefix).
   */
  static splitMetadataString(str: string, prefix?: string): string[] {
    const result: string[] = [];
    const chunk = prefix ? 64 - prefix.length : 64;
    for (let i = 0; i < str.length; i += chunk) {
      const slicedStr = str.slice(i, i + chunk);
      result.push(`${prefix ?? ""}${slicedStr}`);
    }
    return result;
  }
}
